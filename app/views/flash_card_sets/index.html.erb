<% content_for :head do %>
  <%= stylesheet_link_tag 'flash_card_sets' %>
<% end %>
  
<div class="page-container">
  <!-- Header -->
  <div class="header">
    <div class="logo">Flash-AI</div>
    <div class="user-icon"></div>
  </div>
  
  <!-- Create Flashcards Section -->
  <div class="create-section">
    <h1 class="create-title">Create Your Flashcards</h1>
    <div class="search-container">
      <input type="text" class="search-input" id="ai-prompt-input" placeholder="Enter a topic to generate AI flashcards ...">
      <button class="generate-button" id="generate-ai-btn">Generate</button>
    </div>
    <div id="generation-status" class="generation-status" style="display: none;">
      <div class="spinner"></div>
      <p>Generating flashcards...</p>
    </div>
    <div id="generation-error" class="generation-error" style="display: none;"></div>
    <div class="fallback-container" style="margin-top: 10px; text-align: center;">
      <p style="color: #555; font-size: 14px;">Not working? Try our <a href="<%= new_flash_card_set_path %>" style="color: #2079F8;">manual creation</a> or <a href="<%= flash_card_sets_path %>" id="load-sample-btn" style="color: #2079F8; cursor: pointer;">load a sample set</a></p>
    </div>
  </div>
  
  <!-- Flash Card Sets Section -->
  <div class="sets-container">
    <% if notice.present? %>
      <div class="notice"><%= notice %></div>
    <% end %>
    
    <h2 class="sets-title">Your Flash Card Sets</h2>
    
    <div class="card-grid">
      <% favorite_sets = @flash_card_sets.select(&:favorite) %>
      <% unfavorite_sets = @flash_card_sets.reject(&:favorite) %>
      
      <% if favorite_sets.any? %>
        <% favorite_sets.each do |set| %>
          <div class="card">
            <div class="card-content">
              <div class="card-header">
                <h3 class="card-title"><%= set.name %></h3>
                <div class="card-actions">
                  <%= form_with url: toggle_favorite_flash_card_set_path(set), method: :patch, html: {style: "display: inline;"} do |form| %>
                    <%= form.button '★', type: "submit", class: "favorite-btn" %>
                  <% end %>
                  <div style="position: relative; display: inline-block;">
                    <button onclick="showMenu('<%= set.id %>')" style="background: none; border: none; cursor: pointer;">⋮</button>
                    <div id="menu-<%= set.id %>" style="display: none; position: absolute; right: 0; background: white; border: 1px solid #ccc; border-radius: 5px; box-shadow: 0 2px 5px rgba(0,0,0,0.2); z-index: 10;">
                      <%= link_to "Edit", edit_flash_card_set_path(set), style: "display: block; padding: 8px 12px; text-decoration: none; color: black;" %>
                      <%= button_to "Delete", flash_card_set_path(set), method: :delete, style: "background: none; border: none; width: 100%; text-align: left; padding: 8px 12px; cursor: pointer; color: #dc3545;", data: { confirm: "Are you sure you want to delete this set?" } %>
                    </div>
                  </div>
                </div>
              </div>
              <div class="card-count"><%= pluralize(set.length, 'Card') %></div>
              <div class="study-button-container">
                <a href="<%= flash_card_set_path(set) %>" class="study-button">Study</a>
              </div>
            </div>
          </div>
        <% end %>
      <% end %>
      
      <% if unfavorite_sets.any? %>
        <% unfavorite_sets.each do |set| %>
          <div class="card">
            <div class="card-content">
              <div class="card-header">
                <h3 class="card-title"><%= set.name %></h3>
                <div class="card-actions">
                  <%= form_with url: toggle_favorite_flash_card_set_path(set), method: :patch, html: {style: "display: inline;"} do |form| %>
                    <%= form.button '☆', type: "submit", class: "unfavorite-btn" %>
                  <% end %>
                  <div style="position: relative; display: inline-block;">
                    <button onclick="showMenu('<%= set.id %>')" style="background: none; border: none; cursor: pointer;">⋮</button>
                    <div id="menu-<%= set.id %>" style="display: none; position: absolute; right: 0; background: white; border: 1px solid #ccc; border-radius: 5px; box-shadow: 0 2px 5px rgba(0,0,0,0.2); z-index: 10;">
                      <%= link_to "Edit", edit_flash_card_set_path(set), style: "display: block; padding: 8px 12px; text-decoration: none; color: black;" %>
                      <%= button_to "Delete", flash_card_set_path(set), method: :delete, style: "background: none; border: none; width: 100%; text-align: left; padding: 8px 12px; cursor: pointer; color: #dc3545;", data: { confirm: "Are you sure you want to delete this set?" } %>
                    </div>
                  </div>
                </div>
              </div>
              <div class="card-count"><%= pluralize(set.length, 'Card') %></div>
              <div class="study-button-container">
                <a href="<%= flash_card_set_path(set) %>" class="study-button">Study</a>
              </div>
            </div>
          </div>
        <% end %>
      <% end %>
      
      <!-- Create New Set Card (always last) -->
      <a href="<%= new_flash_card_set_path %>" class="card create-new-card">
        <div class="add-circle">
          <span class="plus-sign">+</span>
        </div>
        <span>Create New Set</span>
      </a>
    </div>
  </div>
</div>

<!-- Hidden form for the generate action -->
<div style="display: none;">
  <%= form_with url: generate_flash_card_sets_path, method: :post, id: "generate-form" do |form| %>
    <%= form.hidden_field :prompt, id: "hidden-prompt-field" %>
  <% end %>
</div>

<script>
  // Function to set prompt from localStorage immediately on page load
  function setPromptFromStorage() {
    const promptInput = document.getElementById('ai-prompt-input');
    if (promptInput && (!promptInput.value || promptInput.value.trim() === '')) {
      try {
        const savedPrompt = localStorage.getItem('flashcard_prompt');
        if (savedPrompt) {
          console.log('Immediately setting saved prompt:', savedPrompt);
          promptInput.value = savedPrompt;
        }
      } catch (e) {
        console.warn('Could not read from localStorage:', e);
      }
    }
  }

  // Call immediately and on all navigation events
  setPromptFromStorage();
  document.addEventListener('DOMContentLoaded', setPromptFromStorage);
  document.addEventListener('turbo:load', setPromptFromStorage);
  document.addEventListener('turbo:render', setPromptFromStorage);
  document.addEventListener('turbolinks:load', setPromptFromStorage);
  
  // Separate the menu functionality into a standalone function
  function setupMenus() {
    // Enable menu toggling on each card
    document.querySelectorAll('[id^="menu-"]').forEach(menu => {
      menu.style.display = 'none';
    });
  }
  
  function setupGenerateButton() {
    const generateBtn = document.getElementById('generate-ai-btn');
    const promptInput = document.getElementById('ai-prompt-input');
    const statusDiv = document.getElementById('generation-status');
    const errorDiv = document.getElementById('generation-error');
    const generateForm = document.getElementById('generate-form');
    const hiddenPromptField = document.getElementById('hidden-prompt-field');
    
    if (!generateBtn || !promptInput) {
      console.log("Generate button or prompt input not found");
      return;
    }
    
    console.log("Setting up generate button event listeners");
    
    // Set up click handler for generate button
    generateBtn.onclick = function() {
      const prompt = promptInput.value.trim();
      
      if (!prompt) {
        errorDiv.textContent = 'Please enter a topic or study material';
        errorDiv.style.display = 'block';
        return;
      }
      
      // Show loading state
      generateBtn.disabled = true;
      statusDiv.style.display = 'flex';
      errorDiv.style.display = 'none';
      
      console.log("Attempting to generate flashcards for prompt:", prompt);
      
      // Set hidden field for form submission
      if (hiddenPromptField) {
        hiddenPromptField.value = prompt;
      }
      
      // Use fetch for the form submission to handle JSON response
      fetch(generateForm ? generateForm.action : '<%= generate_flash_card_sets_path %>', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.content || ''
        },
        body: JSON.stringify({ prompt: prompt })
      })
      .then(response => {
        console.log("Response status:", response.status);
        return response.json().catch(e => {
          console.error("Failed to parse JSON response:", e);
          return { error: "Invalid response from server" };
        });
      })
      .then(data => {
        console.log("Response data:", data);
        if (data.success) {
          // Redirect to the new flashcard set
          console.log("Redirecting to:", data.redirect_url);
          window.location.href = data.redirect_url;
        } else {
          // Show error
          console.error("Generation failed:", data.error, data.details);
          let errorMsg = data.error || 'Failed to generate flashcards';
          if (data.details && data.details.length > 0) {
            errorMsg += ': ' + data.details.join(', ');
          }
          errorDiv.textContent = errorMsg;
          errorDiv.style.display = 'block';
          statusDiv.style.display = 'none';
          generateBtn.disabled = false;
        }
      })
      .catch(error => {
        console.error('Error:', error);
        errorDiv.textContent = 'An error occurred while generating flashcards. Please try again.';
        errorDiv.style.display = 'block';
        statusDiv.style.display = 'none';
        generateBtn.disabled = false;
      });
    };
    
    // Handle input changes and store in localStorage
    promptInput.oninput = function() {
      try {
        localStorage.setItem('flashcard_prompt', this.value);
      } catch (e) {
        console.warn('Could not save to localStorage:', e);
      }
    };
    
    // Handle Enter key press
    promptInput.onkeypress = function(e) {
      if (e.key === 'Enter') {
        generateBtn.click();
      }
    };
  }
  
  function setupSampleButton() {
    // Add handler for sample set button
    const loadSampleBtn = document.getElementById('load-sample-btn');
    if (!loadSampleBtn) return;
    
    loadSampleBtn.onclick = function(e) {
      e.preventDefault();
      
      const statusDiv = document.getElementById('generation-status');
      const errorDiv = document.getElementById('generation-error');
      
      // Show loading state
      statusDiv.style.display = 'flex';
      errorDiv.style.display = 'none';
      
      // Create a sample set with biology content
      const samplePrompt = "Basic Biology Concepts";
      const sampleContent = `front,back
Mitochondria,Powerhouse of the cell that generates ATP through cellular respiration
Photosynthesis,Process by which plants convert light energy into chemical energy by using chlorophyll to capture sunlight
DNA,Molecule that carries genetic instructions for development and functioning of all living organisms
Cell membrane,Barrier that separates the interior of a cell from the external environment and controls what enters and exits
Nucleus,Control center of the cell containing genetic material and responsible for cell growth and reproduction`;
      
      fetch('<%= flash_card_sets_path %>', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.content || ''
        },
        body: JSON.stringify({ 
          flash_card_set: {
            name: 'Biology Basics (Sample)',
            flashcards: sampleContent,
            length: 5
          }
        })
      })
      .then(response => {
        if (response.redirected) {
          window.location.reload();
          return;
        }
        return response.json();
      })
      .then(data => {
        if (data && data.error) {
          throw new Error(data.error);
        }
        window.location.reload();
      })
      .catch(error => {
        console.error('Error creating sample set:', error);
        errorDiv.textContent = 'Failed to create sample set. Please try again.';
        errorDiv.style.display = 'block';
        statusDiv.style.display = 'none';
      });
    };
  }
  
  // Menu show/hide function
  function showMenu(id) {
    const menu = document.getElementById(`menu-${id}`);
    if (menu.style.display === 'none') {
      // Hide all other menus first
      document.querySelectorAll('[id^="menu-"]').forEach(el => {
        el.style.display = 'none';
      });
      menu.style.display = 'block';
    } else {
      menu.style.display = 'none';
    }
    
    // Close menu when clicking elsewhere
    document.addEventListener('click', function closeMenu(e) {
      if (!e.target.closest(`#menu-${id}`) && !e.target.closest(`button[onclick="showMenu('${id}')"]`)) {
        menu.style.display = 'none';
        document.removeEventListener('click', closeMenu);
      }
    });
  }
  
  // Initialize all functionality
  function initializePage() {
    console.log("Initializing page");
    setupMenus();
    setupGenerateButton();
    setupSampleButton();
  }
  
  // Set up for all possible navigation events
  document.addEventListener('DOMContentLoaded', initializePage);
  document.addEventListener('turbo:load', initializePage);
  document.addEventListener('turbo:render', initializePage);
  document.addEventListener('turbolinks:load', initializePage);
</script>

<style>
  .generation-status {
    display: flex;
    align-items: center;
    justify-content: center;
    margin-top: 10px;
    color: #555;
  }
  
  .spinner {
    border: 3px solid #f3f3f3;
    border-top: 3px solid #3498db;
    border-radius: 50%;
    width: 20px;
    height: 20px;
    animation: spin 1s linear infinite;
    margin-right: 10px;
  }
  
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  
  .generation-error {
    color: #e74c3c;
    margin-top: 10px;
    text-align: center;
  }
</style>