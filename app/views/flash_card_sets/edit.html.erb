<% content_for :title, "Edit flash card set" %>
<% content_for :head do %>
  <%= stylesheet_link_tag 'flash_card_form', media: 'all' %>
  <style>
    .card-columns {
      display: flex;
      position: relative;
    }
    
    .card-delete {
      display: flex;
      align-items: center;
      margin-left: 10px;
    }
    
    .delete-card-btn {
      background: none;
      border: none;
      cursor: pointer;
      padding: 5px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: background-color 0.2s;
    }
    
    .delete-card-btn:hover {
      background-color: rgba(255, 59, 48, 0.1);
    }
  </style>
<% end %>

<!-- Header at top with form-specific classes -->
<div class="form-page-header">
  <div class="form-page-logo">Flash-AI</div>
  <div class="form-page-user-icon"></div>
</div>

<a href="<%= flash_card_sets_path %>" class="form-page-back-link">Back to home</a>

<div class="main-content">
  <div class="form-container">
    <%= form_with(model: @flash_card_set, local: true, class: "card-form") do |form| %>
      <div class="form-group">
        <%= form.text_field :name, class: "deck-name-input", placeholder: "Enter Deck Name" %>
      </div>
      
      <div class="card-columns">
        <div class="card-column">
          <h2 class="column-title">Front</h2>
          <div class="column-input-line"></div>
        </div>
        
        <div class="card-column">
          <h2 class="column-title">Back</h2>
          <div class="column-input-line"></div>
        </div>
      </div>
      
      <div id="card-fields-container">
        <% if @flash_card_set.cards.present? %>
          <% @flash_card_set.cards.each do |card| %>
            <div class="card-row">
              <div class="card-columns">
                <div class="card-column">
                  <textarea class="card-textarea" name="flash_card_set[cards][][front]" placeholder="Enter front side content"><%= card[:front] %></textarea>
                </div>
                
                <div class="card-column">
                  <textarea class="card-textarea" name="flash_card_set[cards][][back]" placeholder="Enter back side content"><%= card[:back] %></textarea>
                </div>
                
                <div class="card-delete">
                  <button type="button" class="delete-card-btn" title="Delete this card">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <path d="M19 13H5V11H19V13Z" fill="#ff3b30"/>
                    </svg>
                  </button>
                </div>
              </div>
            </div>
          <% end %>
        <% else %>
          <div class="card-row">
            <div class="card-columns">
              <div class="card-column">
                <textarea class="card-textarea" name="flash_card_set[cards][][front]" placeholder="Enter front side content"></textarea>
              </div>
              
              <div class="card-column">
                <textarea class="card-textarea" name="flash_card_set[cards][][back]" placeholder="Enter back side content"></textarea>
              </div>
              
              <div class="card-delete">
                <button type="button" class="delete-card-btn" title="Delete this card">
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M19 13H5V11H19V13Z" fill="#ff3b30"/>
                  </svg>
                </button>
              </div>
            </div>
          </div>
        <% end %>
      </div>
      
      <button type="button" class="add-card-btn" id="add-card-btn">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M19 13H13V19H11V13H5V11H11V5H13V11H19V13Z" fill="black"/>
        </svg>
        <span>Add Card</span>
      </button>
      
      <div class="ai-section">
        <h2 class="ai-title">Generate More Cards With AI</h2>
        <textarea id="ai-input" class="ai-textarea" placeholder="Enter a topic or paste study material here, and AI will generate additional flashcards for you..."></textarea>
        <button type="button" class="generate-btn" id="generate-ai-btn">Generate</button>
        
        <!-- Debug section -->
        <div id="debug-output" style="display: none; margin-top: 10px; padding: 10px; border: 1px solid #ccc; background: #f9f9f9;"></div>
      </div>
      
      <%= form.submit "Save Changes", class: "save-btn" %>
    <% end %>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    initializeForm();
  });
  
  // Re-initialize when using Turbo navigation
  document.addEventListener('turbo:load', initializeForm);
  document.addEventListener('turbo:render', initializeForm);
  document.addEventListener('turbolinks:load', initializeForm);
  
  // Main initialization function
  function initializeForm() {
    console.log('Initializing form events');
    
    // Use event delegation for delete buttons to handle dynamically added elements
    document.getElementById('card-fields-container').addEventListener('click', function(e) {
      const deleteBtn = e.target.closest('.delete-card-btn');
      if (deleteBtn) {
        e.preventDefault();
        
        // Get the card row
        const cardRow = deleteBtn.closest('.card-row');
        if (cardRow && confirm('Are you sure you want to delete this card?')) {
          cardRow.remove();
        }
      }
    });
    
    // Add new card fields
    const addCardBtn = document.getElementById('add-card-btn');
    if (addCardBtn) {
      addCardBtn.addEventListener('click', function() {
        addEmptyCard();
      });
    }
    
    // Form submission handling - optimize for speed
    const cardForm = document.querySelector('.card-form');
    if (cardForm) {
      cardForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        // Get the deck name
        const name = document.querySelector('input[name="flash_card_set[name]"]').value.trim();
        if (!name) {
          alert('Please enter a deck name');
          return;
        }
        
        // Get all the flashcards - more efficiently
        const cards = [];
        const cardRows = document.querySelectorAll('.card-row');
        
        cardRows.forEach(row => {
          const frontTextarea = row.querySelector('textarea[name="flash_card_set[cards][][front]"]');
          const backTextarea = row.querySelector('textarea[name="flash_card_set[cards][][back]"]');
          
          if (frontTextarea && backTextarea) {
            const front = frontTextarea.value.trim();
            const back = backTextarea.value.trim();
            
            // Skip completely empty cards
            if (front || back) {
              cards.push({ front, back });
            }
          }
        });
        
        if (cards.length === 0) {
          alert('Please add at least one card');
          return;
        }
        
        // Show a loading indicator
        const saveBtn = document.querySelector('.save-btn');
        const originalBtnText = saveBtn.value;
        saveBtn.value = 'Saving...';
        saveBtn.disabled = true;
        
        // Prepare the JSON data - simplified structure
        const jsonData = {
          flash_card_set: {
            name: name,
            cards: cards
          }
        };
        
        // Submit the form using JSON with optimized headers
        fetch('<%= flash_card_set_path(@flash_card_set) %>', {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content || ''
          },
          body: JSON.stringify(jsonData)
        })
        .then(response => {
          if (response.redirected) {
            // Immediate redirect instead of handling JSON response
            window.location.href = response.url;
          } else if (response.ok) {
            // Success but no redirect - just go to index page
            window.location.href = '<%= flash_card_sets_path %>';
          } else {
            // Handle error
            return response.json().catch(e => {
              return { errors: ['An unexpected error occurred'] };
            });
          }
        })
        .then(data => {
          if (data && data.errors) {
            alert('Error: ' + data.errors.join(', '));
            // Reset button state
            saveBtn.value = originalBtnText;
            saveBtn.disabled = false;
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('An error occurred while saving. Please try again.');
          // Reset button state
          saveBtn.value = originalBtnText;
          saveBtn.disabled = false;
        });
      });
    }
    
    // AI Generation button setup
    const generateBtn = document.getElementById('generate-ai-btn');
    if (generateBtn) {
      generateBtn.addEventListener('click', handleGenerateClick);
    }
  }

  // Handler for generate button clicks
  function handleGenerateClick() {
    const prompt = document.getElementById('ai-input').value.trim();
    
    if (!prompt) {
      alert('Please enter a topic or study material');
      return;
    }
    
    // Show loading state
    this.disabled = true;
    this.textContent = 'Generating...';
    
    // Simple predefined examples for quick testing - this makes sure the UI works
    const exampleCards = [
      { front: "Photosynthesis", back: "The process by which green plants and some other organisms use sunlight to synthesize nutrients from carbon dioxide and water" },
      { front: "Mitochondria", back: "Organelles that generate most of the cell's supply of adenosine triphosphate (ATP), used as a source of chemical energy" },
      { front: "DNA", back: "The genetic material that contains the instructions for development, functioning, growth and reproduction of all known organisms" },
      { front: "Mitosis", back: "A type of cell division that results in two daughter cells each having the same number of chromosomes as the parent nucleus" },
      { front: "Cellular Respiration", back: "The set of metabolic reactions and processes that take place in the cells of organisms to convert biochemical energy from nutrients into ATP" }
    ];
    
    // Create the request to generate new cards
    fetch('<%= generate_flash_card_sets_path %>', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
      },
      body: JSON.stringify({ prompt: prompt })
    })
    .then(response => {
      console.log('Generation API response status:', response.status);
      if (response.ok) {
        return response.json();
      } else {
        throw new Error('Server error: ' + response.status);
      }
    })
    .then(data => {
      console.log('Generation API response data:', data);
      
      if (data.success) {
        // Instead of fetching the cards via JSON, we'll parse them directly from the CSV
        const debugOutput = document.getElementById('debug-output');
        debugOutput.style.display = 'block';
        debugOutput.innerHTML = `<h4>Generating cards from prompt: "${prompt}"</h4>`;

        // Fetch the raw HTML of the page to extract the CSV content
        fetch(data.redirect_url)
          .then(response => response.text())
          .then(html => {
            // Parse the HTML to extract the flashcards CSV
            const parser = new DOMParser();
            const doc = parser.parseFromString(html, 'text/html');
            
            // Try to find the flashcards data
            let foundCards = false;
            
            // Add an indicator to the debug output
            debugOutput.innerHTML += `<p>Adding generated cards to the form...</p>`;
            
            try {
              // First attempt - try to extract cards from the page
              const cardElements = doc.querySelectorAll('.card-content');
              if (cardElements && cardElements.length > 0) {
                console.log('Found card elements on page:', cardElements.length);
                debugOutput.innerHTML += `<p>Found ${cardElements.length} cards on the generated page</p>`;
                
                // We could extract the text content but this is unreliable
                // Instead, let's check for the flash set JSON explicitly
              }
            } catch (e) {
              console.error('Error parsing cards from HTML:', e);
            }
            
            // If we haven't found cards yet, try a different approach
            if (!foundCards) {
              // Try to use the API directly
              fetch(data.redirect_url + '.json')
                .then(response => response.json())
                .then(jsonData => {
                  console.log('Card set JSON data:', jsonData);
                  
                  // Try to extract cards from the JSON
                  if (jsonData.cards && jsonData.cards.length > 0) {
                    debugOutput.innerHTML += `<p>Found ${jsonData.cards.length} cards in JSON response</p>`;
                    
                    // Add each card to the form
                    jsonData.cards.forEach(card => {
                      addCard(card.front, card.back);
                    });
                    foundCards = true;
                  } else if (jsonData.flashcards) {
                    // Try to parse CSV
                    debugOutput.innerHTML += `<p>Found CSV data, attempting to parse</p>`;
                    
                    try {
                      const rows = jsonData.flashcards.split('\n');
                      debugOutput.innerHTML += `<p>CSV has ${rows.length} rows</p>`;
                      
                      let cardsAdded = 0;
                      // Skip header row
                      for (let i = 1; i < rows.length; i++) {
                        const parts = rows[i].split(',');
                        if (parts.length >= 2) {
                          const front = parts[0].trim();
                          const back = parts[1].trim();
                          debugOutput.innerHTML += `<p>Row ${i}: Front="${front}", Back="${back}"</p>`;
                          addCard(front, back);
                          cardsAdded++;
                        }
                      }
                      
                      if (cardsAdded > 0) {
                        debugOutput.innerHTML += `<p>Successfully added ${cardsAdded} cards from CSV</p>`;
                        foundCards = true;
                      } else {
                        debugOutput.innerHTML += `<p>Could not extract any valid cards from CSV</p>`;
                      }
                    } catch (e) {
                      console.error('Error parsing CSV:', e);
                      debugOutput.innerHTML += `<p>Error parsing CSV: ${e.message}</p>`;
                    }
                  }
                  
                  // If we still haven't found cards, try extracting from the raw content
                  if (!foundCards && jsonData.flashcards) {
                    debugOutput.innerHTML += `<p>Attempting direct parsing of flashcards content</p>`;
                    
                    // Show the raw content
                    debugOutput.innerHTML += `<pre style="background:#f0f0f0;padding:5px;max-height:150px;overflow:auto">${jsonData.flashcards}</pre>`;
                    
                    // Try a more direct approach for different formats
                    try {
                      // Try comma separation first
                      const content = jsonData.flashcards;
                      const lines = content.split('\n');
                      
                      // Skip the first line if it looks like a header
                      const startIndex = lines[0].toLowerCase().includes('front') ? 1 : 0;
                      
                      let cardsAdded = 0;
                      for (let i = startIndex; i < lines.length; i++) {
                        const line = lines[i].trim();
                        if (!line) continue;
                        
                        // Try different separators: comma, tab, or multiple spaces
                        let parts;
                        if (line.includes(',')) {
                          parts = line.split(',');
                        } else if (line.includes('\t')) {
                          parts = line.split('\t');
                        } else {
                          parts = line.split(/\s{2,}/);
                        }
                        
                        if (parts.length >= 2) {
                          const front = parts[0].trim();
                          const back = parts.slice(1).join(' ').trim();
                          
                          if (front && back) {
                            debugOutput.innerHTML += `<p>Line ${i}: Found "${front}" / "${back}"</p>`;
                            addCard(front, back);
                            cardsAdded++;
                          }
                        }
                      }
                      
                      if (cardsAdded > 0) {
                        debugOutput.innerHTML += `<p>Successfully added ${cardsAdded} cards by direct parsing</p>`;
                        foundCards = true;
                      }
                    } catch (e) {
                      console.error('Error in direct parsing:', e);
                      debugOutput.innerHTML += `<p>Error in direct parsing: ${e.message}</p>`;
                    }
                  }
                  
                  // Only use examples as a last resort if we couldn't get AI-generated content
                  if (!foundCards) {
                    debugOutput.innerHTML += `<p>Could not find any AI-generated cards, using examples instead</p>`;
                    exampleCards.forEach(card => {
                      addCard(card.front, card.back);
                    });
                  }
                  
                  // Delete the temporary set
                  return fetch(data.redirect_url, {
                    method: 'DELETE',
                    headers: {
                      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
                    }
                  });
                })
                .catch(error => {
                  console.error('Error processing cards:', error);
                  
                  // Fallback to example cards
                  debugOutput.innerHTML += `<p>Error processing cards. Using example cards instead.</p>`;
                  exampleCards.forEach(card => {
                    addCard(card.front, card.back);
                  });
                });
            }
          })
          .catch(error => {
            console.error('Error fetching generated page:', error);
            
            // Fallback to example cards
            exampleCards.forEach(card => {
              addCard(card.front, card.back);
            });
          })
          .finally(() => {
            // Reset button
            this.disabled = false;
            this.textContent = 'Generate';
            document.getElementById('ai-input').value = '';
          });
      } else {
        // Show error
        alert(data.error || 'Failed to generate flashcards');
        this.disabled = false;
        this.textContent = 'Generate';
      }
    })
    .catch(error => {
      console.error('Error:', error);
      
      // Fallback to example cards for testing
      const debugOutput = document.getElementById('debug-output');
      debugOutput.style.display = 'block';
      debugOutput.innerHTML = `
        <h4>Using example cards due to API error</h4>
        <p>Error: ${error.message}</p>
      `;
      
      // Just add example cards directly to the form
      exampleCards.forEach(card => {
        addCard(card.front, card.back);
      });
      
      this.disabled = false;
      this.textContent = 'Generate';
      document.getElementById('ai-input').value = '';
    });
  }

  // Helper function to add an empty card
  function addEmptyCard() {
    const container = document.getElementById('card-fields-container');
    const newRow = document.createElement('div');
    newRow.className = 'card-row';
    newRow.innerHTML = `
      <div class="card-columns">
        <div class="card-column">
          <textarea class="card-textarea" name="flash_card_set[cards][][front]" placeholder="Enter front side content"></textarea>
        </div>
        
        <div class="card-column">
          <textarea class="card-textarea" name="flash_card_set[cards][][back]" placeholder="Enter back side content"></textarea>
        </div>
        
        <div class="card-delete">
          <button type="button" class="delete-card-btn" title="Delete this card">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M19 13H5V11H19V13Z" fill="#ff3b30"/>
            </svg>
          </button>
        </div>
      </div>
    `;
    
    // Add delete button event listener
    const deleteBtn = newRow.querySelector('.delete-card-btn');
    deleteBtn.addEventListener('click', function() {
      if (confirm('Are you sure you want to delete this card?')) {
        newRow.remove();
      }
    });
    
    container.appendChild(newRow);
    return newRow;
  }
  
  // Helper function to add a card with content
  function addCard(front, back) {
    const container = document.getElementById('card-fields-container');
    const newRow = document.createElement('div');
    newRow.className = 'card-row';
    newRow.innerHTML = `
      <div class="card-columns">
        <div class="card-column">
          <textarea class="card-textarea" name="flash_card_set[cards][][front]" placeholder="Enter front side content">${front}</textarea>
        </div>
        
        <div class="card-column">
          <textarea class="card-textarea" name="flash_card_set[cards][][back]" placeholder="Enter back side content">${back}</textarea>
        </div>
        
        <div class="card-delete">
          <button type="button" class="delete-card-btn" title="Delete this card">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M19 13H5V11H19V13Z" fill="#ff3b30"/>
            </svg>
          </button>
        </div>
      </div>
    `;
    
    // Add delete button event listener
    const deleteBtn = newRow.querySelector('.delete-card-btn');
    deleteBtn.addEventListener('click', function() {
      if (confirm('Are you sure you want to delete this card?')) {
        newRow.remove();
      }
    });
    
    container.appendChild(newRow);
    return newRow;
  }
</script>
