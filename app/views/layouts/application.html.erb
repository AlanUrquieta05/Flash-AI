<!DOCTYPE html>
<html>
  <head>
    <title><%= content_for(:title) || "Flash Ai" %></title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="mobile-web-app-capable" content="yes">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= yield :head %>

    <%# Enable PWA manifest for installable apps (make sure to enable in config/routes.rb too!) %>
    <%#= tag.link rel: "manifest", href: pwa_manifest_path(format: :json) %>

    <link rel="icon" href="/icon.png" type="image/png">
    <link rel="icon" href="/icon.svg" type="image/svg+xml">
    <link rel="apple-touch-icon" href="/icon.png">

    <%# Includes all stylesheet files in app/assets/stylesheets %>
    <%= stylesheet_link_tag :app, "data-turbo-track": "reload" %>
    <%= javascript_importmap_tags %>
    
    <%# Helper script for CSRF handling and URL fixing %>
    <script>
      // This ensures that the CSRF token is properly handled during Turbo navigation
      // and fixes URLs when deployed to various environments
      document.addEventListener('turbo:load', function() {
        // Refresh CSRF token in all forms after navigation
        var token = document.querySelector('meta[name="csrf-token"]').content;
        
        // Update all forms
        document.querySelectorAll('form input[name="authenticity_token"]').forEach(function(input) {
          input.value = token;
        });
        
        // Make token available for fetch/XHR calls
        window.csrfToken = token;
        
        // Fix for environment differences with CSRF protection
        // Get the current base URL from the page
        var currentBaseUrl = window.location.origin;
        
        // Update all form actions to use the current base URL if they're pointing to localhost
        document.querySelectorAll('form').forEach(function(form) {
          if (form.action && (
              form.action.includes('localhost') || 
              form.action.includes('127.0.0.1'))) {
            // Replace localhost or 127.0.0.1 URLs with the current origin
            form.action = form.action.replace(/https?:\/\/(localhost|127\.0\.0\.1)(:\d+)?/, currentBaseUrl);
          }
        });
        
        // Also fix links that might be pointing to localhost
        document.querySelectorAll('a').forEach(function(link) {
          if (link.href && (
              link.href.includes('localhost') || 
              link.href.includes('127.0.0.1'))) {
            // Only fix internal links (not external ones)
            if (link.getAttribute('href').startsWith('/') || 
                link.href.includes('localhost') || 
                link.href.includes('127.0.0.1')) {
              link.href = link.href.replace(/https?:\/\/(localhost|127\.0\.0\.1)(:\d+)?/, currentBaseUrl);
            }
          }
        });
        
        // Restore prompt value from localStorage
        setTimeout(function() {
          const promptInput = document.getElementById('ai-prompt-input');
          if (promptInput) {
            try {
              const savedPrompt = localStorage.getItem('flashcard_prompt');
              if (savedPrompt && promptInput.value === '') {
                console.log('Restoring saved prompt value from localStorage');
                promptInput.value = savedPrompt;
              }
            } catch (e) {
              console.warn('Could not restore from localStorage:', e);
            }
          }
        }, 100); // Small delay to ensure DOM is ready
      });
    </script>
  </head>

  <body>
    <%= yield %>
  </body>
</html>
