<!DOCTYPE html>
<html>
  <head>
    <title><%= content_for(:title) || "Flash Ai" %></title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="mobile-web-app-capable" content="yes">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= yield :head %>

    <%# Enable PWA manifest for installable apps (make sure to enable in config/routes.rb too!) %>
    <%#= tag.link rel: "manifest", href: pwa_manifest_path(format: :json) %>

    <link rel="icon" href="/icon.png" type="image/png">
    <link rel="icon" href="/icon.svg" type="image/svg+xml">
    <link rel="apple-touch-icon" href="/icon.png">
    
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

    <%# Includes all stylesheet files in app/assets/stylesheets %>
    <%= stylesheet_link_tag :app, "data-turbo-track": "reload", version: Time.current.to_i %>
    <%= javascript_importmap_tags %>
    
    <%# Helper script for CSRF handling and URL fixing %>
    <script>
      // This ensures that the CSRF token is properly handled during Turbo navigation
      // and fixes URLs when deployed to various environments
      document.addEventListener('turbo:load', function() {
        // Refresh CSRF token in all forms after navigation
        var token = document.querySelector('meta[name="csrf-token"]').content;
        
        // Update all forms
        document.querySelectorAll('form input[name="authenticity_token"]').forEach(function(input) {
          input.value = token;
        });
        
        // Make token available for fetch/XHR calls
        window.csrfToken = token;
        
        // Fix for environment differences with CSRF protection
        // Get the current base URL from the page
        var currentBaseUrl = window.location.origin;
        
        // Update all form actions to use the current base URL if they're pointing to localhost
        document.querySelectorAll('form').forEach(function(form) {
          if (form.action && (
              form.action.includes('localhost') || 
              form.action.includes('127.0.0.1'))) {
            // Replace localhost or 127.0.0.1 URLs with the current origin
            form.action = form.action.replace(/https?:\/\/(localhost|127\.0\.0\.1)(:\d+)?/, currentBaseUrl);
          }
        });
        
        // Also fix links that might be pointing to localhost
        document.querySelectorAll('a').forEach(function(link) {
          if (link.href && (
              link.href.includes('localhost') || 
              link.href.includes('127.0.0.1'))) {
            // Only fix internal links (not external ones)
            if (link.getAttribute('href').startsWith('/') || 
                link.href.includes('localhost') || 
                link.href.includes('127.0.0.1')) {
              link.href = link.href.replace(/https?:\/\/(localhost|127\.0\.0\.1)(:\d+)?/, currentBaseUrl);
            }
          }
        });
        
        // Restore prompt value from localStorage
        setTimeout(function() {
          const promptInput = document.getElementById('ai-prompt-input');
          if (promptInput) {
            try {
              const savedPrompt = localStorage.getItem('flashcard_prompt');
              if (savedPrompt && promptInput.value === '') {
                console.log('Restoring saved prompt value from localStorage');
                promptInput.value = savedPrompt;
              }
            } catch (e) {
              console.warn('Could not restore from localStorage:', e);
            }
          }
        }, 100); // Small delay to ensure DOM is ready
        
        // Initialize tooltips
        document.querySelectorAll('[data-tooltip]').forEach(el => {
          el.addEventListener('mouseenter', function() {
            const tooltip = document.createElement('div');
            tooltip.className = 'tooltip';
            tooltip.textContent = this.getAttribute('data-tooltip');
            document.body.appendChild(tooltip);
            
            const rect = this.getBoundingClientRect();
            tooltip.style.top = `${rect.top - tooltip.offsetHeight - 10 + window.scrollY}px`;
            tooltip.style.left = `${rect.left + (rect.width / 2) - (tooltip.offsetWidth / 2) + window.scrollX}px`;
            tooltip.style.opacity = '1';
            
            this.addEventListener('mouseleave', function onMouseLeave() {
              tooltip.style.opacity = '0';
              setTimeout(() => tooltip.remove(), 300);
              this.removeEventListener('mouseleave', onMouseLeave);
            });
          });
        });
        
        // Add animation classes after page load
        document.querySelectorAll('.animate-on-load').forEach((el, index) => {
          setTimeout(() => {
            el.classList.add('animated');
          }, 100 * index);
        });
      });
    </script>
  </head>

  <body>
    <div class="app-container" style="width: 100%; max-width: 100%; margin: 0; padding: 0;">
      <%= yield %>
    </div>
    
    <!-- Toast notification container -->
    <div id="toast-container"></div>
    
    <script>
      // Toast notification system
      function showToast(message, type = 'info') {
        const toast = document.createElement('div');
        toast.className = `toast toast-${type} animate-on-load`;
        
        const icon = document.createElement('i');
        switch(type) {
          case 'success': icon.className = 'fas fa-check-circle'; break;
          case 'error': icon.className = 'fas fa-exclamation-circle'; break;
          case 'warning': icon.className = 'fas fa-exclamation-triangle'; break;
          default: icon.className = 'fas fa-info-circle';
        }
        
        toast.appendChild(icon);
        
        const messageSpan = document.createElement('span');
        messageSpan.textContent = message;
        toast.appendChild(messageSpan);
        
        document.getElementById('toast-container').appendChild(toast);
        
        setTimeout(() => {
          toast.classList.add('animated');
          setTimeout(() => {
            toast.classList.remove('animated');
            toast.classList.add('toast-hiding');
            setTimeout(() => toast.remove(), 300);
          }, 3000);
        }, 10);
      }
      
      // Convert Rails flash messages to toasts
      document.addEventListener('turbo:load', function() {
        const notice = document.querySelector('.notice');
        if (notice) {
          showToast(notice.textContent, 'success');
          notice.style.display = 'none';
        }
        
        const alert = document.querySelector('.alert');
        if (alert) {
          showToast(alert.textContent, 'error');
          alert.style.display = 'none';
        }
      });
    </script>
  </body>
</html>
